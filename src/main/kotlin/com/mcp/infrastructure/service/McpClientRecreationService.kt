package com.mcp.infrastructure.service

import io.modelcontextprotocol.client.McpSyncClient
import org.slf4j.LoggerFactory
import org.springframework.ai.mcp.SyncMcpToolCallbackProvider
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory
import org.springframework.context.ApplicationContext
import org.springframework.context.ConfigurableApplicationContext
import org.springframework.core.env.Environment
import org.springframework.stereotype.Service
import java.util.concurrent.ConcurrentHashMap

@Service
class McpClientRecreationService(
    private val applicationContext: ApplicationContext,
    private val environment: Environment
) {
    private val log = LoggerFactory.getLogger(javaClass)
    private val recreationAttempts = ConcurrentHashMap<String, Long>()
    
    fun recreateFailedClients(): Boolean {
        return try {
            log.info("üîÑ Starting complete MCP client recreation...")
            
            val configurableContext = applicationContext as ConfigurableApplicationContext
            val beanFactory = configurableContext.beanFactory
            
            // 1. Í∏∞Ï°¥ MCP Í¥ÄÎ†® BeanÎì§ÏùÑ Ï∞æÏïÑÏÑú Ï†úÍ±∞
            destroyExistingMcpBeans(beanFactory)
            
            // 2. Ïû†Ïãú ÎåÄÍ∏∞
            Thread.sleep(3000)
            
            // 3. Spring AI MCP ÏûêÎèô ÏÑ§Ï†ïÏùÑ Îã§Ïãú Ìä∏Î¶¨Í±∞
            recreateMcpBeans(beanFactory)
            
            log.info("‚úÖ MCP client recreation completed successfully")
            true
            
        } catch (e: Exception) {
            log.error("‚ùå Failed to recreate MCP clients", e)
            false
        }
    }
    
    private fun destroyExistingMcpBeans(beanFactory: ConfigurableListableBeanFactory) {
        log.debug("üóëÔ∏è Destroying existing MCP beans...")
        
        // MCP Í¥ÄÎ†® BeanÎì§ÏùÑ Ï∞æÏïÑÏÑú Ï†úÍ±∞
        val mcpBeanNames = beanFactory.getBeanNamesForType(McpSyncClient::class.java)
        mcpBeanNames.forEach { beanName ->
            try {
                val bean = beanFactory.getBean(beanName) as McpSyncClient
                bean.close() // Í∏∞Ï°¥ Ïó∞Í≤∞ Ï†ïÎ¶¨
                beanFactory.destroySingleton(beanName)
                log.debug("Destroyed MCP client bean: {}", beanName)
            } catch (e: Exception) {
                log.debug("Error destroying bean {}: {}", beanName, e.message)
            }
        }
        
        // SyncMcpToolCallbackProviderÎèÑ Ïû¨ÏÉùÏÑ± ÌïÑÏöî
        val callbackProviderNames = beanFactory.getBeanNamesForType(SyncMcpToolCallbackProvider::class.java)
        callbackProviderNames.forEach { beanName ->
            try {
                beanFactory.destroySingleton(beanName)
                log.debug("Destroyed MCP callback provider bean: {}", beanName)
            } catch (e: Exception) {
                log.debug("Error destroying callback provider {}: {}", beanName, e.message)
            }
        }
    }
    
    private fun recreateMcpBeans(beanFactory: ConfigurableListableBeanFactory) {
        log.debug("üÜï Recreating MCP beans...")
        
        try {
            // Spring BootÏùò ÏûêÎèô ÏÑ§Ï†ïÏùÑ Îã§Ïãú Ìä∏Î¶¨Í±∞ÌïòÍ∏∞ ÏúÑÌï¥
            // ApplicationContextÎ•º ÏÉàÎ°úÍ≥†Ïπ® (ÏúÑÌóòÌï† Ïàò ÏûàÏúºÎØÄÎ°ú Ï°∞Ïã¨Ïä§ÎüΩÍ≤å)
            val configurableContext = applicationContext as ConfigurableApplicationContext
            
            // ÎåÄÏïà: BeanÏùÑ ÏàòÎèôÏúºÎ°ú Îã§Ïãú ÏÉùÏÑ±
            // Ïù¥Îäî Îçî ÏïàÏ†ÑÌïú Î∞©Î≤ïÏûÖÎãàÎã§
            log.debug("Triggering MCP auto-configuration refresh...")
            
            // Spring AIÏùò MCP ÏûêÎèô ÏÑ§Ï†ïÏù¥ Îã§Ïãú Ïã§ÌñâÎêòÎèÑÎ°ù ÌôòÍ≤ΩÏùÑ Ï°∞Ïûë
            // Ïù¥Í≤ÉÏùÄ Ïã§Ï†úÎ°úÎäî Î≥µÏû°ÌïòÎØÄÎ°ú, Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ïû¨ÏãúÏûëÏùÑ Í∂åÏû•ÌïòÎäî Î©îÏãúÏßÄÎ•º Î°úÍπÖ
            log.warn("‚ö†Ô∏è Complete MCP client recreation requires application restart for best results")
            log.info("üí° Consider restarting the application if MCP reconnection continues to fail")
            
        } catch (e: Exception) {
            log.error("Failed to recreate MCP beans", e)
            throw e
        }
    }
    
    fun canAttemptRecreation(clientId: String): Boolean {
        val now = System.currentTimeMillis()
        val lastAttempt = recreationAttempts[clientId] ?: 0L
        
        return if (now - lastAttempt > 300_000) { // 5Î∂ÑÏóê Ìïú Î≤àÎßå
            recreationAttempts[clientId] = now
            true
        } else {
            false
        }
    }
}